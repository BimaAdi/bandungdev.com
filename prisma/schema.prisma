// https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// -----------------------------------------------------------------------------
// User
// -----------------------------------------------------------------------------

model User {
  id String @id @default(cuid())

  email    String  @unique(map: "User.email_unique")
  username String? @unique(map: "User.username_unique")
  fullname String?

  password UserPassword?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPassword {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String @unique

  hash String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -----------------------------------------------------------------------------
// Event
// -----------------------------------------------------------------------------

model Event {
  id String @id @default(cuid())

  title       String
  description String?   @db.Text
  datetime    DateTime?

  // locationAddress LocationAddress

  category   EventCategory? @relation(fields: [categoryId], references: [id])
  categoryId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model EventCategory {
  id String @id @default(cuid())

  sequence    Int?    @unique // 1 | 2 | 3 | ...
  symbol      String  @unique // "MEETUP"
  name        String  @unique // "Meetup"
  description String? @db.Text // "Long description"

  events Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -----------------------------------------------------------------------------
// Location and Address
// -----------------------------------------------------------------------------

model LocationAddress {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  label String // Location label name

  address    String? // The complete combined Location address
  addressURL String? // https://goo.gl/maps/1xABCDEF123456

  street        String? // Street name
  streetDetails String? // Street or location details, such as floor number
  subDistrict   String?
  district      String?
  city          String?
  province      String?
  postalCode    String?
  countryCode   String?

  countryId     String?
  provinceId    String?
  cityId        String?
  districtId    String?
  subDistrictId String?

  // Geolocation
  latitude  Decimal? // -90 to 90, Example: -6.1234567
  longitude Decimal? // -180 to 180, Example: 106.1234567
}

model Example {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
